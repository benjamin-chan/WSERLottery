print(t1, type="html", caption.placement="top")
f <- ggplot(d, aes(x=x1, y=y)) +
geom_boxplot()
ggplot(d, aes(x=x1, y=y)) +
geom_boxplot()
ggplot(d, aes(y=y, color=x1)) +
geom_boxplot()
ggplot(d, aes(x=y, y=z1)) +
geom_boxplot()
require(RCurl)
getURL{https://dl.dropboxusercontent.com/u/386956/Medicare_Provider_Charge_Inpatient_DRG100_FY2011.csv}
url <- getURL(https://dl.dropboxusercontent.com/u/386956/Medicare_Provider_Charge_Inpatient_DRG100_FY2011.csv)
url <- getURL("https://dl.dropboxusercontent.com/u/386956/Medicare_Provider_Charge_Inpatient_DRG100_FY2011.csv")
?read.csv
df <- read.csv(textConnection(url), header=TRUE, sep=",", nrows=1000)
head(df)
names(df)
?sample
df <- read.csv(textConnection(url), header=TRUE, sep=",")
dfOR <- subset(df, Provider.State=="OR")
head(dfOR)
table(dfOR$Provider.Name)
?quantile
?percentile
names(df)
dfDRG652 <- subset(df, DRG.Definition=="652 - KIDNEY TRANSPLANT")
table(df$DRG.Definition)
require(xtable, quietly=TRUE)
print(xtable(table(df$DRG.Definition)), type="html")
x <- "470 - MAJOR JOINT REPLACEMENT OR REATTACHMENT OF LOWER EXTREMITY W/O MCC"
pmatch("470", x)
dfDRG470 <- subset(df, pmatch("470", DRG.Definition))
?grep
dfDRG470 <- subset(df, substr(DRG.Definition, 1, 3)=="470")
subset(dfDRG470, Provider.State=="OR")
grep("/^OHSU/", dfDRG470$Provider.Name)
grep("^OHSU", dfDRG470$Provider.Name)
dfDRG470[grep("^OHSU", dfDRG470$Provider.Name),]
dfDRG470 <- df[grep("^470", df$DRG.Definition),]
dfOHSU <- df[grep("^OHSU", df$Provider.Name),]
print(xtable(dfOHSU[grep("^470", dfOHSU$DRG.Definition),]), type="html")
?ecdf
names(df)
x <- ecdf(df$Average.Covered.Charges)
x
?quantile
x <- dfOHSU[grep("^470", dfOHSU$DRG.Definition), Average.Covered.Charges]
x <- dfOHSU[grep("^470", dfOHSU$DRG.Definition), "Average.Covered.Charges"]
x
sum(!is.na(dfDRG470$Average.Covered.Charges))
sum(dfDRG470$Average.Covered.Charges <= x)
qplot(dfDRG470$Average.Covered.Charges)
require(ggplot2, quietly=TRUE)
qplot(dfDRG470$Average.Covered.Charges)
qplot(dfDRG470$Average.Covered.Charges, title="DRG 470")
?qplot
qplot(dfDRG470$Average.Covered.Charges, main="DRG 470")
qplot(dfDRG470$Average.Covered.Charges, main="DRG 470", xlab="Average Covered Charges")
?rank
?scale
y <- rank(dfDRG470$Average.Covered.Charge)
y[x]
y==x
y[y==x]
x
p <- sum(dfDRG470$Average.Covered.Charge <= x) / length(dfDRG470)
p
length(dfDRG470)
p <- sum(dfDRG470$Average.Covered.Charge <= x) / nrow(dfDRG470)
p
format(p * 100, digits=1)
format(p * 100, digits=3)
dfOR <- subset(df, Provider.State=="OR")
dfOR <- subset(df, Provider.State=="OR")
dfOHSU <- df[grep("^OHSU", df$Provider.Name),]
print(xtable(table(dfOHSU$DRG.Definition)), type="html")
dfDRG470 <- df[grep("^470", df$DRG.Definition),]
qplot(dfDRG470$Average.Covered.Charges, main="DRG 470", xlab="Average Covered Charges")
print(xtable(dfOHSU[grep("^470", dfOHSU$DRG.Definition),]), type="html")
x <- dfOHSU[grep("^470", dfOHSU$DRG.Definition), "Average.Covered.Charges"]
p <- sum(dfDRG470$Average.Covered.Charge <= x) / nrow(dfDRG470)
install.packages("metafor")
install.packages("gbm")
library (metafor)
library(gbm)
exit
q()
require(metafor)
help(metafor)
data(dat.bcg)
rstudio::viewData(dat.bcg)
require(metafor)
help(metafor)
### load data
dat <- get(data(dat.nielweise2007))
### standard (inverse-variance) random-effects model
res <- rma(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, drop00=TRUE)
print(res, digits=3)
predict(res, transf=exp, digits=2)
### random-effects conditional logistic model
## Not run:
res <- rma.glmm(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, model="CM.EL")
print(res, digits=3)
predict(res, transf=exp, digits=2)
## End(Not run)
res <- rma(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, drop00=TRUE)
plot(res)
forest.plot(res)
forest.rma(res)
install.packages("lme4")
source('~/.active-rstudio-document', echo=TRUE)
require(metafor)
require(lme4)
study <- c(HIP, Kopparberg, CNBSS-1, Malmö, Stockholm, Östergötland, Gothenberg, Age)
year <- c(1986, 1995, 2002, 2002, 2002, 2002, 2003, 2006)
x1i <- c(64, 22, 105, 53, 34, 31, 34, 105)
n1i <- c(13740, 9582, 25214, 13568, 14303, 10285, 11724, 53884)
x2i <- c(82, 16, 108, 66, 13, 30, 59, 251)
n2i <- c(13740, 5031, 25216, 12279, 8021, 10459, 14217, 106956)
D <- data.frame(study, year, x1i, n1i, x2i, n2i)
study <- c("HIP", "Kopparberg", "CNBSS-1", "Malmö", "Stockholm", "Östergötland", "Gothenberg", "Age")
year <- c(1986, 1995, 2002, 2002, 2002, 2002, 2003, 2006)
x1i <- c(64, 22, 105, 53, 34, 31, 34, 105)
n1i <- c(13740, 9582, 25214, 13568, 14303, 10285, 11724, 53884)
x2i <- c(82, 16, 108, 66, 13, 30, 59, 251)
n2i <- c(13740, 5031, 25216, 12279, 8021, 10459, 14217, 106956)
D <- data.frame(study, year, x1i, n1i, x2i, n2i)
rstudio::viewData(D)
rma(measure="RR", data=D, x1i=x1i, n1i=n1i, x2i=x2i, n2i=n2i)
study <- c("HIP", "Kopparberg", "CNBSS-1", "Malmö", "Stockholm", "Östergötland", "Gothenberg", "Age")
year <- c(1986, 1995, 2002, 2002, 2002, 2002, 2003, 2006)
deaths1 <- c(64, 22, 105, 53, 34, 31, 34, 105)
n1 <- c(13740, 9582, 25214, 13568, 14303, 10285, 11724, 53884)
deaths2 <- c(82, 16, 108, 66, 13, 30, 59, 251)
n2 <- c(13740, 5031, 25216, 12279, 8021, 10459, 14217, 106956)
D <- data.frame(study, year, deaths1, n1, deaths2, n2)
rma(measure="RR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
rma.glmm(measure="RR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
rma.glmm(measure="IRR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
rma.glmm(measure="OR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
rma(measure="RR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2, method="EB")
rma(measure="RR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2, method="REML")
RR <- rma(measure="RR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
summary(M)
RR <- rma(measure="RR", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
summary(RR)
plot(RR)
help(forest)
forest(RR, slab=study)
forest(RR, slab=study, transf=TRUE)
forest(RR, slab=study, transf=exp)
forest(RR, slab=study, transf=exp, ref=1)
forest(RR, slab=study, transf=exp, ref=1, col="blue")
RD <- rma(measure="RD", data=D, ai=deaths1, n1i=n1, ci=deaths2, n2i=n2)
summary(RD)
plot(RD)
plot(RD, digits=4)
forest(RD, slab=study, transf=exp, digits=4)
forest(RD, slab=study, transf=1000, digits=4)
forest(RD, slab=study, digits=4)
require(xtable)
xtable(RR)
labbe(RR)
summary(RR, transf=exp)
trimfill(RR)
predict(RR, transf=exp)
predict(RR, transf=transf.exp.int)
predict(RD)
install.packages("maptools")
library("maptools")
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
require(ggplot2, quietly=TRUE)
convertLbsKg <- function (x) {x * 0.453592}
convertFtMeters <- function (x) {x * 0.3048}
pe <- function (m, h) {
g <- 9.8  # N / kg
m * g * h
}
convertLbsKg <- function (x) {x * 0.453592}
convertFtMeters <- function (x) {x * 0.3048}
pe <- function (m, h) {
g <- 9.8  # N / kg
m * g * h
}
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
m0
m1
m2
h <- convertFtMeters(seq(10, 1200, 10))
h
pe0 <- pe(m0, h)
pe1 <- pe(m1, h)
pe2 <- pe(m2, h)
qplot(h, pe0)
h
h <- convertFtMeters(seq(100, 1200, 10))
pe0 <- pe(m0, h)
pe1 <- pe(m1, h)
pe2 <- pe(m2, h)
qplot(h, pe0)
qplot(h, pe1)
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0)}
pe1 <- function(h) {pe(m1)}
pe2 <- function(h) {pe(m2)}
h <- convertFtMeters(seq(100, 1200, 10))
pe0 <- pe(m0, h)
pe1 <- pe(m1, h)
pe2 <- pe(m2, h)
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2)
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0)}
pe1 <- function(h) {pe(m1)}
pe2 <- function(h) {pe(m2)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0)
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0)
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2)
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_log10
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_log
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_sqrt()
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_sqrt() +
scale_y_sqrt()
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_sqrt("Height (m)") +
scale_y_sqrt("Potential energy (J)") +
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_sqrt("Height (m)") +
scale_y_sqrt("Potential energy (J)")
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_log10("Height (m)") +
scale_y_log10("Potential energy (J)")
m0 <- convertLbsKg(140)
m1 <- m0 + convertLbsKg(5)
m2 <- m0 + convertLbsKg(10)
pe0 <- function(h) {pe(m0, h)}
pe1 <- function(h) {pe(m1, h)}
pe2 <- function(h) {pe(m2, h)}
ggplot(data.frame(x = h), aes(x)) +
stat_function(fun = pe0) +
stat_function(fun = pe1) +
stat_function(fun = pe2) +
scale_x_sqrt("Height (m)") +
scale_y_sqrt("Potential energy (J)")
library(igraph)
?plot.igraph
folder <- file.path("home", "benchan", "Copy", "Sandbox", "MedicareClaimsSynPUFs", "DE1_0_2010_Beneficiary_Summary_File_Sample_1")
file <- "DE1_0_2010_Beneficiary_Summary_File_Sample_1.csv"
D <- read.table(file.path(folder, file), header=TRUE)
file
file.path(folder, file)
folder <- file.path("", "home", "benchan", "Copy", "Sandbox", "MedicareClaimsSynPUFs", "DE1_0_2010_Beneficiary_Summary_File_Sample_1")
folder
file <- "DE1_0_2010_Beneficiary_Summary_File_Sample_1.csv"
D <- read.table(file.path(folder, file), header=TRUE)
?read.table
D <- read.table(file.path(folder, file), header=FALSE)
?readlines
?read.lines
??readl
?readLines
readLines(file.path(folder, file), n=5)
read.table
?read.table
D <- read.table(file.path(folder, file), header=TRUE, quote="\"", fill=TRUE, strip.white-TRUE)
D <- read.table(file.path(folder, file), header=TRUE, quote="\"", fill=TRUE, strip.white=TRUE)
head(D)
D <- read.table(file.path(folder, file), header=TRUE, sep=",", quote="\"", fill=TRUE, strip.white=TRUE)
head(D)
D <- read.table(file.path(folder, file), header=TRUE, sep=",", quote="\"", fill=TRUE)
D <- read.table(file.path(folder, file), header=TRUE, sep=",", quote="\"")
?read.csv
D <- read.csv(file.path(folder, file))
aggregate
names(D)
totalPartA <- sum(BENE_HI_CVRAGE_TOT_MONS)
totalPartA <- sum(D$BENE_HI_CVRAGE_TOT_MONS)
attach(D)
totalPartA <- sum(BENE_HI_CVRAGE_TOT_MONS)
totalPartB <- sum(BENE_SMI_CVRAGE_TOT_MONS)
totalPartC <- sum(BENE_HMO_CVRAGE_TOT_MONS)
totalPartD <- sum(PLAN_CVRG_MOS_NUM)
detach(D)
totalMM <- list(totalPartA, totalPartB, totalPartC, totaPartD)
totalMM <- list(totalPartA, totalPartB, totalPartC, totalPartD)
totalMM
avgME <- totalMM / 12
seq("A", "D")
seq("A", "D", 1)
?seq
LETTERS(seq(1, 4))
LETTERS[seq(1, 4)]
part <- LETTERS[seq(1, 4)]
attach(D)
totalPartA <- sum(BENE_HI_CVRAGE_TOT_MONS)
totalPartB <- sum(BENE_SMI_CVRAGE_TOT_MONS)
totalPartC <- sum(BENE_HMO_CVRAGE_TOT_MONS)
totalPartD <- sum(PLAN_CVRG_MOS_NUM)
detach(D)
totalMM <- c(totalPartA, totalPartB, totalPartC, totalPartD)
avgME <- totalMM / 12
aggD <- data.frame(part, totalMM, avgME)
aggD
part <- LETTERS[seq(1, 4)]
attach(D)
totalPartA <- sum(BENE_HI_CVRAGE_TOT_MONS)
totalPartB <- sum(BENE_SMI_CVRAGE_TOT_MONS)
totalPartC <- sum(BENE_HMO_CVRAGE_TOT_MONS)
totalPartD <- sum(PLAN_CVRG_MOS_NUM)
detach(D)
totalMM <- c(totalPartA, totalPartB, totalPartC, totalPartD)
avgME <- totalMM / 12
aggD <- data.frame(part, totalMM, avgME)
aggD
x <- rpois(100, 5)
table(x)
install.packages("ggplot2")
require(xtable, quietly=TRUE)
require(ggplot2, quietly=TRUE)
spots <- 270
distn <- c(1739, 561, 257, 106, 52)
applicants <- sum(distn)
runner <- seq(1, applicants)
tickets <- c(rep(5, distn[5]), rep(4, distn[4]), rep(3, distn[3]), rep(2, distn[2]), rep(1, distn[1]))
dfHat <- data.frame(runner, tickets)
dfHat$prob <- dfHat$tickets / sum(dfHat$tickets)
addmargins(table(factor(dfHat$tickets)))
head(dfHat)
tail(dfHat)
size <- 1E1
set.seed(as.numeric(as.Date("2013-11-27", format="%Y-%m-%d")) * applicants)
lottery <- matrix(nrow=size, ncol=spots)
system.time(
for (i in 1:size) {
lottery[i, ] <- sample(dfHat$runner, spots, prob=dfHat$prob)
})
i <- sample(seq(1, size), 1)
sampLottery <- list(i, sort(lottery[i, ]))
names(sampLottery) <- c("lottery", "runner")
sampLottery
addmargins(table(dfHat$tickets[sampLottery$runner]))
lottery2 <- matrix(nrow=size, ncol=spots)
for (i in 1:size) {
lottery2[i, ] <- dfHat$tickets[lottery[i, ]]
}
tickets <- factor(as.vector(t(lottery2)))
sim <- rep(seq(1, size), each=spots)
dfLottery <- data.frame(sim, tickets)
system.time(aggLottery <- aggregate(tickets ~ sim, dfLottery, table))
sim <- rep(seq(1, size), each=5)
tickets <- factor(rep(seq(1, 5), size))
freq <- as.vector(t(aggLottery$tickets))
dfSummary <- data.frame(sim, tickets, freq)
setwd("~/Copy/Sandbox/WSERLottery")
save(aggLottery, file="aggLottery.RData")
total <- rep(distn, size)
dfSummary$prob <- 100 * (dfSummary$freq / total)
avg <- aggregate(prob ~ tickets, dfSummary, mean)
med <- aggregate(prob ~ tickets, dfSummary, median)
sd  <- aggregate(prob ~ tickets, dfSummary, sd)
ev <- distn * avg[, 2] / 100
probWSER <- c(7.9, 15.2, 21.9, 28.0, NA)
evWSER <- distn * probWSER / 100
diffprob <- avg[, 2] - probWSER
diffev <- ev - evWSER
pctdiff <- 100 * diffprob / avg[, 2]
simsum <- data.frame(avg, med[, 2], sd[, 2], distn, ev, probWSER, evWSER, diffprob, diffev, pctdiff)
names(simsum) <- c("Tickets", "Mean", "Median", "SD", "N", "EV", "Prob (WSER)", "EV (WSER)", "Diff. prob.", "Diff. EV", "% diff.")
y1 <- max(density(dfSummary$prob[dfSummary$tickets == 1])$y)
y2 <- max(density(dfSummary$prob[dfSummary$tickets == 2])$y)
y3 <- max(density(dfSummary$prob[dfSummary$tickets == 3])$y)
y4 <- max(density(dfSummary$prob[dfSummary$tickets == 4])$y)
y5 <- max(density(dfSummary$prob[dfSummary$tickets == 5])$y)
y <- c(y1, y2, y3, y4, y5)
g <- ggplot(dfSummary, aes(x=prob, y=..density.., fill=tickets))
g <- g + geom_density(alpha=1/2, color=NA)
g <- g + scale_fill_brewer(type="div", palette="BrBG")
g <- g + labs(title="2014 WSER Lottery Selection Probability Densities", x="Percent", y=paste("Proportion of", format(size, big.mark=","), "simulations"), fill="Tickets")
g <- g + annotate("text", label=paste(format(simsum$Mean, digits=2, trim=TRUE), "%", sep=""), x=simsum$Mean, y=y)
g <- g + theme(legend.position="bottom")
g
y1 <- max(density(dfSummary$freq[dfSummary$tickets == 1])$y)
y2 <- max(density(dfSummary$freq[dfSummary$tickets == 2])$y)
y3 <- max(density(dfSummary$freq[dfSummary$tickets == 3])$y)
y4 <- max(density(dfSummary$freq[dfSummary$tickets == 4])$y)
y5 <- max(density(dfSummary$freq[dfSummary$tickets == 5])$y)
y <- c(y1, y2, y3, y4, y5)
g <- ggplot(dfSummary, aes(x=freq, fill=tickets))
g <- g + stat_density(y=..density.., alpha=1/2, color=NA)
g <- g + scale_fill_brewer(type="div", palette="BrBG")
g <- g + labs(title="2012 WSER Lottery Selection Distribution Densities", x="Number", y=paste("Proportion of", format(size, big.mark=","), "simulations"), fill="Tickets")
g <- g + annotate("text", label=format(simsum$EV, digits=2, trim=TRUE), x=simsum$EV, y=y)
g <- g + theme(legend.position="bottom")
g
y1 <- max(density(dfSummary$freq[dfSummary$tickets == 1])$y)
y2 <- max(density(dfSummary$freq[dfSummary$tickets == 2])$y)
y3 <- max(density(dfSummary$freq[dfSummary$tickets == 3])$y)
y4 <- max(density(dfSummary$freq[dfSummary$tickets == 4])$y)
y5 <- max(density(dfSummary$freq[dfSummary$tickets == 5])$y)
y <- c(y1, y2, y3, y4, y5)
g <- ggplot(dfSummary, aes(x=freq, y=..density.., fill=tickets))
g <- g + geom_density(alpha=1/2, color=NA)
g <- g + scale_fill_brewer(type="div", palette="BrBG")
g <- g + labs(title="2012 WSER Lottery Selection Distribution Densities", x="Number", y=paste("Proportion of", format(size, big.mark=","), "simulations"), fill="Tickets")
g <- g + annotate("text", label=format(simsum$EV, digits=2, trim=TRUE), x=simsum$EV, y=y)
g <- g + theme(legend.position="bottom")
g
y1 <- max(density(dfSummary$freq[dfSummary$tickets == 1])$y)
y2 <- max(density(dfSummary$freq[dfSummary$tickets == 2])$y)
y3 <- max(density(dfSummary$freq[dfSummary$tickets == 3])$y)
y4 <- max(density(dfSummary$freq[dfSummary$tickets == 4])$y)
y5 <- max(density(dfSummary$freq[dfSummary$tickets == 5])$y)
y <- c(y1, y2, y3, y4, y5)
g <- ggplot(dfSummary, aes(x=freq, y=..scaled.., fill=tickets))
g <- g + geom_density(alpha=1/2, color=NA)
g <- g + scale_fill_brewer(type="div", palette="BrBG")
g <- g + labs(title="2014 WSER Lottery Selection Distribution Densities", x="Number", y=paste("Proportion of", format(size, big.mark=","), "simulations"), fill="Tickets")
g <- g + annotate("text", label=format(simsum$EV, digits=2, trim=TRUE), x=simsum$EV, y=y)
g <- g + theme(legend.position="bottom")
g
